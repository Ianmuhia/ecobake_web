// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ecobake/ent/favourites"
	"ecobake/ent/product"
	"ecobake/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Favourites is the model entity for the Favourites schema.
type Favourites struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FavouritesQuery when eager-loading is set.
	Edges              FavouritesEdges `json:"edges"`
	product_favourites *int
	user_favourites    *int
}

// FavouritesEdges holds the relations/edges for other nodes in the graph.
type FavouritesEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FavouritesEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Product == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FavouritesEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Favourites) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case favourites.FieldID:
			values[i] = new(sql.NullInt64)
		case favourites.FieldCreatedAt, favourites.FieldUpdatedAt, favourites.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case favourites.ForeignKeys[0]: // product_favourites
			values[i] = new(sql.NullInt64)
		case favourites.ForeignKeys[1]: // user_favourites
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Favourites", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Favourites fields.
func (f *Favourites) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case favourites.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case favourites.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case favourites.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case favourites.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				f.DeletedAt = value.Time
			}
		case favourites.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_favourites", value)
			} else if value.Valid {
				f.product_favourites = new(int)
				*f.product_favourites = int(value.Int64)
			}
		case favourites.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_favourites", value)
			} else if value.Valid {
				f.user_favourites = new(int)
				*f.user_favourites = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProduct queries the "product" edge of the Favourites entity.
func (f *Favourites) QueryProduct() *ProductQuery {
	return (&FavouritesClient{config: f.config}).QueryProduct(f)
}

// QueryUser queries the "user" edge of the Favourites entity.
func (f *Favourites) QueryUser() *UserQuery {
	return (&FavouritesClient{config: f.config}).QueryUser(f)
}

// Update returns a builder for updating this Favourites.
// Note that you need to call Favourites.Unwrap() before calling this method if this Favourites
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Favourites) Update() *FavouritesUpdateOne {
	return (&FavouritesClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Favourites entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Favourites) Unwrap() *Favourites {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Favourites is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Favourites) String() string {
	var builder strings.Builder
	builder.WriteString("Favourites(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(f.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FavouritesSlice is a parsable slice of Favourites.
type FavouritesSlice []*Favourites

func (f FavouritesSlice) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
