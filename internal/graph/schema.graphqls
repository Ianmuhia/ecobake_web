# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# https://gqlgen.com/getting-started/
directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

# new directive
directive @auth on FIELD_DEFINITION

scalar Any

type Query {
    users: Users! @goField(forceResolver: true) @auth
    categories: Categories
}
type Mutation {
    createUser(input:NewUser!):AccountRegister
    createCategory(input:CreateCategory!):Category
    updateCategory(input:CreateCategory!):Category
    deleteCategory(input:Int!):Any



    # Create JWT token.
    tokenCreate(
        # Email of a user.
        email: String!
        # Password of a user.
        password: String!
    ): CreateToken
    # Refresh JWT token. Mutation tries to take refreshToken from the input.If it
    # fails it will try to take refreshToken from the http-only cookie
    # -refreshToken. csrfToken is required when refreshToken is provided as a cookie.
    tokenRefresh(
        # Refresh token.
        refreshToken: String!
    ): RefreshToken
    # Verify JWT token.
    tokenVerify(
        # JWT token to validate.
        token: String!
    ): VerifyToken
    # Deactivate all JWT tokens of the currently authenticated user.
    #
    # Requires one of the following permissions: AUTHENTICATED_USER.
    tokensDeactivateAll: DeactivateAllUserTokens
    # Prepare external authentication url for user by custom plugin.

    # Sends an email with the account password modification link.
    requestPasswordReset(
        # Email of the user that will be used for password recovery.
        email: String!
    ): RequestPasswordReset
    # Confirm user account with token sent by email during registration.
    confirmAccount(
        # E-mail of the user performing account confirmation.
        email: String!
        # A one-time token required to confirm the account.
        otp: String!
    ): ConfirmAccount
    # Sets the user's password from the token sent by email using the RequestPasswordReset mutation.
    setPassword(
        # Email of a user.
        email: String!
        # Password of a user.
        password: String!
        # A one-time token required to set the password.
        token: String!
    ): SetPassword
    # Change the password of the logged in user.
    #
    # Requires one of the following permissions: AUTHENTICATED_USER.
    passwordChange(
        # New user password.
        newPassword: String!
        # Current user password.
        oldPassword: String!
        # Access token.
        accessToken: String!
    ): PasswordChange
    # Request email change of the logged in user.
    #
    # Requires one of the following permissions: AUTHENTICATED_USER.
    requestEmailChange(
        # Slug of a channel which will be used to notify users. Optional when only one channel exists.
        channel: String
        # New user email.
        newEmail: String!
        # User password.
        password: String!
        # URL of a view where users should be redirected to update the email address. URL in RFC 1808 format.
        redirectUrl: String!
    ): RequestEmailChange
    # Confirm the email change of the logged-in user.
    #
    # Requires one of the following permissions: AUTHENTICATED_USER.
    confirmEmailChange(
        # Slug of a channel which will be used to notify users. Optional when only one channel exists.
        channel: String
        # A one-time token required to change the email.
        token: String!
    ): ConfirmEmailChange

    # Register a new user.
    accountRegister(
        # Fields required to create a user.
        input: AccountRegisterInput!
    ): AccountRegister
    # Updates the account of the logged-in user.
    #
    # Requires one of the following permissions: AUTHENTICATED_USER.
    accountUpdate(
        # Fields required to update the account of the logged-in user.
        input: AccountInput!
    ): AccountUpdate
    # Sends an email with the account removal link for the logged-in user.
    #
    # Requires one of the following permissions: AUTHENTICATED_USER.
    accountRequestDeletion(
        # Slug of a channel which will be used to notify users. Optional when only one channel exists.
        channel: String
        # URL of a view where users should be redirected to delete their account. URL in RFC 1808 format.
        redirectUrl: String!
    ): AccountRequestDeletion
    # Remove user account.
    #
    # Requires one of the following permissions: AUTHENTICATED_USER.
    accountDelete(
        # A one-time token required to remove account. Sent by email using AccountRequestDeletion mutation.
        token: String!
    ): AccountDelete

    # Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
    userAvatarUpdate(
        # Represents an image file in a multipart request.
        image: Upload!
    ): UserAvatarUpdate
    # Deletes a user avatar. Only for staff members.
    #
    # Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
    userAvatarDelete(token: String!): UserAvatarDelete
    # Activate or deactivate users.
    #

}


type Subscription {
    userCreated: User!
}

interface Node {
    id: ID!
}
type User {
    id: Int!
    username: String!
    email: String!
    phone_number: String!
    profile_image: String!
    created_at: String!
    updated_at: String!

}

type Category {
    id: Int!
    name: String!
    icon: String!
    created_at: String!
    updated_at: String!

}

type Categories {
    categories :[Category]
    errors: [ListEntityErrorCode!]!

}

input CreateCategory {
    name: String!
    icon: String!
}

type Users {
    users : [User]
    errors: [ListEntityErrorCode!]!

}

type AccountRegisterResponse {
    errors: [AccountError!]!
    user: User
}



input NewUser {
    password: String!
    phone_number: String!
    email: String!

}

type LoginResp {
    user :User!
    refresh:String
    access:String
}

input LoginUser {
    password: String!
    email: String!
}




# Remove user account.
#
# Requires one of the following permissions: AUTHENTICATED_USER.
type AccountDelete {
    errors: [AccountError!]!
    user: User
}

type AccountError {
    # Name of a field that caused the error. A value of `null` indicates that the
    # error isn't associated with a particular field.
    field: String!
    # The error message.
    message: String!
    # The error code.
    code: AccountErrorCode!


}
# Sends an email with the account password modification link.
type RequestPasswordReset {
    errors: [AccountError!]!
    nats_errors:NatsErrorCodes!
}


# An enumeration.
enum AccountErrorCode {
    ACTIVATE_OWN_ACCOUNT
    ACTIVATE_SUPERUSER_ACCOUNT
    DUPLICATED_INPUT_ITEM
    DEACTIVATE_OWN_ACCOUNT
    DEACTIVATE_SUPERUSER_ACCOUNT
    DELETE_NON_STAFF_USER
    DELETE_OWN_ACCOUNT
    DELETE_STAFF_ACCOUNT
    DELETE_SUPERUSER_ACCOUNT
    GRAPHQL_ERROR
    INACTIVE
    INVALID
    INVALID_PASSWORD
    LEFT_NOT_MANAGEABLE_PERMISSION
    INVALID_CREDENTIALS
    NOT_FOUND
    OUT_OF_SCOPE_USER
    OUT_OF_SCOPE_GROUP
    OUT_OF_SCOPE_PERMISSION
    PASSWORD_ENTIRELY_NUMERIC
    PASSWORD_TOO_COMMON
    PASSWORD_TOO_SHORT
    PASSWORD_TOO_SIMILAR
    REQUIRED
    UNIQUE
    JWT_SIGNATURE_EXPIRED
    JWT_INVALID_TOKEN
    JWT_DECODE_ERROR
    JWT_MISSING_TOKEN
    JWT_INVALID_CSRF_TOKEN
    CHANNEL_INACTIVE
    MISSING_CHANNEL_SLUG
    ACCOUNT_NOT_CONFIRMED
}

enum NatsErrorCodes{
    ERR_CONNECTION_CLOSED
    ERR_AUTHENTICATION
    ERR_AUTH_TIMEOUT
    ERR_AUTH_EXPIRED
    ERR_MAX_PAYLOAD
    ERR_MAX_CONTROL_LINE
    ERR_RESERVED_PUBLISH_SUBJECT
    ERR_BAD_PUBLISH_SUBJECT
    ERR_BAD_SUBJECT
    ERR_BAD_QUALIFIER
    ERR_BAD_CLIENT_PROTOCOL
    ERR_TOO_MANY_CONNECTIONS
    ERR_TOO_MANY_ACCOUNT_CONNECTIONS
    ERR_TOO_MANY_SUBS
    ERR_TOO_MANY_SUB_TOKENS
    ERR_CLIENT_CONNECTED_TO_ROUTE_PORT
    ERR_CLIENT_CONNECTED_TO_LEAF_NODE_PORT
    ERR_LEAF_NODE_HAS_SAME_CLUSTER_NAME
    ERR_LEAF_NODE_DISABLED
    ERR_CONNECTED_TO_WRONG_PORT
    ERR_ACCOUNT_EXISTS
    ERR_BAD_ACCOUNT
    ERR_RESERVED_ACCOUNT
    ERR_MISSING_ACCOUNT
    ERR_MISSING_SERVICE
    ERR_BAD_SERVICE_TYPE
    ERR_BAD_SAMPLING
    ERR_ACCOUNT_VALIDATION
    ERR_ACCOUNT_EXPIRED
    ERR_NO_ACCOUNT_RESOLVER
    ERR_ACCOUNT_RESOLVER_UPDATE_TOO_SOON
    ERR_ACCOUNT_RESOLVER_SAME_CLAIMS
    ERR_STREAM_IMPORT_AUTHORIZATION
    ERR_STREAM_IMPORT_BAD_PREFIX
    ERR_STREAM_IMPORT_DUPLICATE
    ERR_SERVICE_IMPORT_AUTHORIZATION
    ERR_IMPORT_FORMS_CYCLE
    ERR_CYCLE_SEARCH_DEPTH
    ERR_CLIENT_OR_ROUTE_CONNECTED_TO_GATEWAY_PORT
    ERR_WRONG_GATEWAY
    ERR_NO_SYS_ACCOUNT
    ERR_REVOCATION
    ERR_SERVER_NOT_RUNNING
    ERR_BAD_MSG_HEADER
    ERR_MSG_HEADERS_NOT_SUPPORTED
    ERR_NO_RESPONDERS_REQUIRES_HEADERS
    ERR_CLUSTER_NAME_CONFIG_CONFLICT
    ERR_CLUSTER_NAME_REMOTE_CONFLICT
    ERR_MALFORMED_SUBJECT
    ERR_SUBSCRIBE_PERMISSION_VIOLATION
    ERR_NO_TRANSFORMS
    ERR_CERT_NOT_PINNED
    ERR_DUPLICATE_SERVER_NAME
    ERR_MINIMUM_VERSION_REQUIRED
    ERR_INVALID_MAPPING_DESTINATION
    ERR_INVALID_MAPPING_DESTINATION_SUBJECT
    ERR_MAPPING_DESTINATION_NOT_USING_ALL_WILDCARDS
    ERR_UNKNOWN_MAPPING_DESTINATION_FUNCTION
    ERROR_MAPPING_DESTINATION_FUNCTION_WILDCARD_INDEX_OUT_OF_RANGE
    ERROR_MAPPING_DESTINATION_FUNCTION_NOT_ENOUGH_ARGUMENTS
    ERROR_MAPPING_DESTINATION_FUNCTION_INVALID_ARGUMENT
    ERROR_MAPPING_DESTINATION_FUNCTION_TOO_MANY_ARGUMENTS

}
input AccountInput {
    # Given name.
    firstName: String
    # Family name.
    lastName: String
}

# Register a new user.
type AccountRegister {
    # Informs whether users need to confirm their email address.
    requiresConfirmation: Boolean
    errors: [AccountError!]!
    user: User
}

input AccountRegisterInput {
    # Given name.
    firstName: String
    # Family name.
    lastName: String
    # The email address of the user.
    email: String!
    # Password.
    password: String!
    # Base of frontend URL that will be needed to create confirmation URL.
    redirectUrl: String
    # Slug of a channel which will be used to notify users. Optional when only one channel exists.
    channel: String
}

# Sends an email with the account removal link for the logged-in user.
#
# Requires one of the following permissions: AUTHENTICATED_USER.
type AccountRequestDeletion {

    errors: [AccountError!]!
}



# Updates the account of the logged-in user.
#
# Requires one of the following permissions: AUTHENTICATED_USER.
type AccountUpdate {

    errors: [AccountError!]!
    user: User
}


# Create JWT token.
type CreateToken {
    # JWT token, required to authenticate.
    token: String!
    # JWT refresh token, required to re-generate access token.
    refreshToken: String!
    # A user instance.
    user: User
    errors: [AccountError!]!
}

# Confirm user account with token sent by email during registration.
type ConfirmAccount {
    errors: [AccountError!]!
}
# Represents an image.
type Image {
    # The URL of the image.
    url: String!
    # Alt text for an image.
    alt: String
}
# Confirm the email change of the logged-in user.
#
# Requires one of the following permissions: AUTHENTICATED_USER.
type ConfirmEmailChange {
    # A user instance with a new email.
    user: User
    errors: [AccountError!]!
}
# Represents user address data.
type Address  {
    id: ID!
    firstName: String!
    lastName: String!
    companyName: String!
    streetAddress1: String!
    streetAddress2: String!
    city: String!
    cityArea: String!
    postalCode: String!
    countryArea: String!
    phone: String
    # Address is user's default shipping address.
    isDefaultShippingAddress: Boolean
    # Address is user's default billing address.
    isDefaultBillingAddress: Boolean
}

type CheckoutError {
    # Name of a field that caused the error. A value of `null` indicates that the
    # error isn't associated with a particular field.
    field: String
    # The error message.
    message: String
    # The error code.
    code: CheckoutErrorCode!
    # List of varint IDs which causes the error.
    variants: [ID!]
    # List of line Ids which cause the error.
    lines: [ID!]

}
# Change the password of the logged in user.
#
# Requires one of the following permissions: AUTHENTICATED_USER.
type PasswordChange {
    # A user instance with a new password.
    user: User
    errors: [AccountError!]!
}
enum  ListEntityErrorCode {
    GRAPHQL_ERROR
    NOT_FOUND
}

# An enumeration.
enum CheckoutErrorCode {
    BILLING_ADDRESS_NOT_SET
    CHECKOUT_NOT_FULLY_PAID
    PRODUCT_NOT_PUBLISHED
    PRODUCT_UNAVAILABLE_FOR_PURCHASE
    INSUFFICIENT_STOCK
    INVALID
    INVALID_SHIPPING_METHOD
    NOT_FOUND
    PAYMENT_ERROR
    QUANTITY_GREATER_THAN_LIMIT
    REQUIRED
    SHIPPING_ADDRESS_NOT_SET
    SHIPPING_METHOD_NOT_APPLICABLE
    DELIVERY_METHOD_NOT_APPLICABLE
    SHIPPING_METHOD_NOT_SET
    SHIPPING_NOT_REQUIRED
    TAX_ERROR
    UNIQUE
    VOUCHER_NOT_APPLICABLE
    GIFT_CARD_NOT_APPLICABLE
    ZERO_QUANTITY
    MISSING_CHANNEL_SLUG
    CHANNEL_INACTIVE
    UNAVAILABLE_VARIANT_IN_CHANNEL
    EMAIL_NOT_SET
    NO_LINES
}
# Refresh JWT token. Mutation tries to take refreshToken from the input.If it
# fails it will try to take refreshToken from the http-only cookie -refreshToken.
# csrfToken is required when refreshToken is provided as a cookie.
type RefreshToken {
    # JWT token, required to authenticate.
    token: String!
    # A user instance.
    user: User
    errors: [AccountError!]!
}

# The `GenericScalar` scalar type
# represents a generic
# GraphQL scalar value
#that could be:
# String, Boolean, Int, Float, List or Object.
scalar GenericScalar
# Verify JWT token.
type VerifyToken {
    # User assigned to token.
    user: User
    # Determine if token is valid or not.
    isValid: Boolean!
    # JWT payload.
    payload: GenericScalar

    errors: [AccountError!]!
}
# Deactivate all JWT tokens of the currently authenticated user.
#
# Requires one of the following permissions: AUTHENTICATED_USER.
type DeactivateAllUserTokens {
    errors: [AccountError!]!
}
# Sets the user's password from the token sent by email using the RequestPasswordReset mutation.
type SetPassword {
    # JWT token, required to authenticate.
    token: String
    # JWT refresh token, required to re-generate access token.
    refreshToken: String
    # A user instance.
    user: User

    errors: [AccountError!]!
}
# Request email change of the logged in user.
#
# Requires one of the following permissions: AUTHENTICATED_USER.
type RequestEmailChange {
    # A user instance.
    user: User
    errors: [AccountError!]!
}



# Create a user avatar. Only for staff members. This mutation must be sent as a
# `multipart` request. More detailed specs of the upload format can be found here:
# https://github.com/jaydenseric/graphql-multipart-request-spec
#
# Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
type UserAvatarUpdate {
    # An updated user instance.
    user: User
    errors: [AccountError!]!
}

# Variables of this type must be set to null in mutations. They will be replaced
# with a filename from a following multipart part containing a binary file. See:
# https://github.com/jaydenseric/graphql-multipart-request-spec.
scalar Upload

type UploadError {
    # Name of a field that caused the error. A value of `null` indicates that the
    # error isn't associated with a particular field.
    field: String
    # The error message.
    message: String
    # The error code.
    code: UploadErrorCode!
}

# Deletes a user avatar. Only for staff members.
#
# Requires one of the following permissions: AUTHENTICATED_STAFF_USER.
type UserAvatarDelete {
    # An updated user instance.
    user: User

    errors: [AccountError!]!
}

# An enumeration.
enum UploadErrorCode {
    GRAPHQL_ERROR
}


type File {
    # The URL of the file.
    url: String!
    # Content type of the file.
    contentType: String
}
# Upload a file. This mutation must be sent as a `multipart` request. More
# detailed specs of the upload format can be found here:
# https://github.com/jaydenseric/graphql-multipart-request-spec
#
# Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.
type FileUpload {
    uploadedFile: File

    errors: [UploadError!]!
}




scalar DateTime



