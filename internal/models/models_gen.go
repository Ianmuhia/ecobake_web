// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type Node interface {
	IsNode()
	GetID() string
}

type AccountDelete struct {
	Errors []*AccountError `json:"errors"`
	User   *User           `json:"user"`
}

type AccountError struct {
	Field   string           `json:"field"`
	Message string           `json:"message"`
	Code    AccountErrorCode `json:"code"`
}

type AccountInput struct {
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
}

type AccountRegister struct {
	RequiresConfirmation *bool           `json:"requiresConfirmation"`
	Errors               []*AccountError `json:"errors"`
	User                 *User           `json:"user"`
}

type AccountRegisterInput struct {
	FirstName   *string `json:"firstName"`
	LastName    *string `json:"lastName"`
	Email       string  `json:"email"`
	Password    string  `json:"password"`
	RedirectURL *string `json:"redirectUrl"`
	Channel     *string `json:"channel"`
}

type AccountRegisterResponse struct {
	Errors []*AccountError `json:"errors"`
	User   *User           `json:"user"`
}

type AccountRequestDeletion struct {
	Errors []*AccountError `json:"errors"`
}

type AccountUpdate struct {
	Errors []*AccountError `json:"errors"`
	User   *User           `json:"user"`
}

type Address struct {
	ID                       string  `json:"id"`
	FirstName                string  `json:"firstName"`
	LastName                 string  `json:"lastName"`
	CompanyName              string  `json:"companyName"`
	StreetAddress1           string  `json:"streetAddress1"`
	StreetAddress2           string  `json:"streetAddress2"`
	City                     string  `json:"city"`
	CityArea                 string  `json:"cityArea"`
	PostalCode               string  `json:"postalCode"`
	CountryArea              string  `json:"countryArea"`
	Phone                    *string `json:"phone"`
	IsDefaultShippingAddress *bool   `json:"isDefaultShippingAddress"`
	IsDefaultBillingAddress  *bool   `json:"isDefaultBillingAddress"`
}

type Categories struct {
	Categories []*Category           `json:"categories"`
	Errors     []ListEntityErrorCode `json:"errors"`
}

type Category struct {
	ID        int    `json:"id"`
	Name      string `json:"name"`
	Icon      string `json:"icon"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
}

type CheckoutError struct {
	Field    *string           `json:"field"`
	Message  *string           `json:"message"`
	Code     CheckoutErrorCode `json:"code"`
	Variants []string          `json:"variants"`
	Lines    []string          `json:"lines"`
}

type ConfirmAccount struct {
	Errors []*AccountError `json:"errors"`
}

type ConfirmEmailChange struct {
	User   *User           `json:"user"`
	Errors []*AccountError `json:"errors"`
}

type CreateCategory struct {
	Name string `json:"name"`
	Icon string `json:"icon"`
}

type CreateToken struct {
	Token        string          `json:"token"`
	RefreshToken string          `json:"refreshToken"`
	User         *User           `json:"user"`
	Errors       []*AccountError `json:"errors"`
}

type DeactivateAllUserTokens struct {
	Errors []*AccountError `json:"errors"`
}

type File struct {
	URL         string  `json:"url"`
	ContentType *string `json:"contentType"`
}

type FileUpload struct {
	UploadedFile *File          `json:"uploadedFile"`
	Errors       []*UploadError `json:"errors"`
}

type Image struct {
	URL string  `json:"url"`
	Alt *string `json:"alt"`
}

type LoginResp struct {
	User    User    `json:"user"`
	Refresh *string `json:"refresh"`
	Access  *string `json:"access"`
}

type LoginUser struct {
	Password string `json:"password"`
	Email    string `json:"email"`
}

type NewProduct struct {
	Name                 string            `json:"name"`
	Price                string            `json:"price"`
	Category             int               `json:"category"`
	Description          string            `json:"description"`
	Ingredients          string            `json:"ingredients"`
	Images               []*graphql.Upload `json:"images"`
	AvailableForPurchase string            `json:"availableForPurchase"`
}

type NewUser struct {
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
}

type PasswordChange struct {
	User   *User           `json:"user"`
	Errors []*AccountError `json:"errors"`
}

type Product struct {
	ID          int      `json:"id"`
	Name        string   `json:"name"`
	Price       string   `json:"price"`
	Category    Category `json:"category"`
	Description string   `json:"description"`
	Ingredients string   `json:"ingredients"`
	TotalRating float64  `json:"totalRating"`
	Images      []string `json:"images"`
	CreatedAt   string   `json:"created_at"`
	UpdatedAt   string   `json:"updated_at"`
}

type ProductCreateResponse struct {
	Errors  []ProductErrorCode `json:"errors"`
	Product Product            `json:"product"`
}

type ProductResponse struct {
	Products *Product              `json:"products"`
	Errors   []ListEntityErrorCode `json:"errors"`
}

type Products struct {
	Products []*Product            `json:"products"`
	Errors   []ListEntityErrorCode `json:"errors"`
}

type RefreshToken struct {
	Token  string          `json:"token"`
	User   *User           `json:"user"`
	Errors []*AccountError `json:"errors"`
}

type RequestEmailChange struct {
	User   *User           `json:"user"`
	Errors []*AccountError `json:"errors"`
}

type RequestPasswordReset struct {
	Errors     []*AccountError `json:"errors"`
	NatsErrors NatsErrorCodes  `json:"nats_errors"`
}

type SetPassword struct {
	Token        *string         `json:"token"`
	RefreshToken *string         `json:"refreshToken"`
	User         *User           `json:"user"`
	Errors       []*AccountError `json:"errors"`
}

type UpdateProduct struct {
	ID                   int               `json:"id"`
	Name                 string            `json:"name"`
	Price                string            `json:"price"`
	Category             int               `json:"category"`
	Description          string            `json:"description"`
	Ingredients          string            `json:"ingredients"`
	Images               []*graphql.Upload `json:"images"`
	AvailableForPurchase string            `json:"availableForPurchase"`
}

type UploadError struct {
	Field   *string         `json:"field"`
	Message *string         `json:"message"`
	Code    UploadErrorCode `json:"code"`
}

type UploadFile struct {
	File graphql.Upload `json:"file"`
}

type User struct {
	ID           int    `json:"id"`
	Username     string `json:"username"`
	Email        string `json:"email"`
	PhoneNumber  string `json:"phone_number"`
	Password     string `json:"password"`
	ProfileImage string `json:"profile_image"`
	CreatedAt    string `json:"created_at"`
	UpdatedAt    string `json:"updated_at"`
}

type UserAvatarDelete struct {
	User   *User           `json:"user"`
	Errors []*AccountError `json:"errors"`
}

type UserAvatarUpdate struct {
	User   *User           `json:"user"`
	Errors []*AccountError `json:"errors"`
}

type Users struct {
	Users  []*User               `json:"users"`
	Errors []ListEntityErrorCode `json:"errors"`
}

type VerifyToken struct {
	User    *User           `json:"user"`
	IsValid bool            `json:"isValid"`
	Payload *string         `json:"payload"`
	Errors  []*AccountError `json:"errors"`
}

type AccountErrorCode string

const (
	AccountErrorCodeActivateOwnAccount          AccountErrorCode = "ACTIVATE_OWN_ACCOUNT"
	AccountErrorCodeActivateSuperuserAccount    AccountErrorCode = "ACTIVATE_SUPERUSER_ACCOUNT"
	AccountErrorCodeDuplicatedInputItem         AccountErrorCode = "DUPLICATED_INPUT_ITEM"
	AccountErrorCodeDeactivateOwnAccount        AccountErrorCode = "DEACTIVATE_OWN_ACCOUNT"
	AccountErrorCodeDeactivateSuperuserAccount  AccountErrorCode = "DEACTIVATE_SUPERUSER_ACCOUNT"
	AccountErrorCodeDeleteNonStaffUser          AccountErrorCode = "DELETE_NON_STAFF_USER"
	AccountErrorCodeDeleteOwnAccount            AccountErrorCode = "DELETE_OWN_ACCOUNT"
	AccountErrorCodeDeleteStaffAccount          AccountErrorCode = "DELETE_STAFF_ACCOUNT"
	AccountErrorCodeDeleteSuperuserAccount      AccountErrorCode = "DELETE_SUPERUSER_ACCOUNT"
	AccountErrorCodeGraphqlError                AccountErrorCode = "GRAPHQL_ERROR"
	AccountErrorCodeInactive                    AccountErrorCode = "INACTIVE"
	AccountErrorCodeInvalid                     AccountErrorCode = "INVALID"
	AccountErrorCodeInvalidPassword             AccountErrorCode = "INVALID_PASSWORD"
	AccountErrorCodeLeftNotManageablePermission AccountErrorCode = "LEFT_NOT_MANAGEABLE_PERMISSION"
	AccountErrorCodeInvalidCredentials          AccountErrorCode = "INVALID_CREDENTIALS"
	AccountErrorCodeNotFound                    AccountErrorCode = "NOT_FOUND"
	AccountErrorCodeOutOfScopeUser              AccountErrorCode = "OUT_OF_SCOPE_USER"
	AccountErrorCodeOutOfScopeGroup             AccountErrorCode = "OUT_OF_SCOPE_GROUP"
	AccountErrorCodeOutOfScopePermission        AccountErrorCode = "OUT_OF_SCOPE_PERMISSION"
	AccountErrorCodePasswordEntirelyNumeric     AccountErrorCode = "PASSWORD_ENTIRELY_NUMERIC"
	AccountErrorCodePasswordTooCommon           AccountErrorCode = "PASSWORD_TOO_COMMON"
	AccountErrorCodePasswordTooShort            AccountErrorCode = "PASSWORD_TOO_SHORT"
	AccountErrorCodePasswordTooSimilar          AccountErrorCode = "PASSWORD_TOO_SIMILAR"
	AccountErrorCodeRequired                    AccountErrorCode = "REQUIRED"
	AccountErrorCodeUnique                      AccountErrorCode = "UNIQUE"
	AccountErrorCodeJwtSignatureExpired         AccountErrorCode = "JWT_SIGNATURE_EXPIRED"
	AccountErrorCodeJwtInvalidToken             AccountErrorCode = "JWT_INVALID_TOKEN"
	AccountErrorCodeJwtDecodeError              AccountErrorCode = "JWT_DECODE_ERROR"
	AccountErrorCodeJwtMissingToken             AccountErrorCode = "JWT_MISSING_TOKEN"
	AccountErrorCodeJwtInvalidCsrfToken         AccountErrorCode = "JWT_INVALID_CSRF_TOKEN"
	AccountErrorCodeChannelInactive             AccountErrorCode = "CHANNEL_INACTIVE"
	AccountErrorCodeMissingChannelSlug          AccountErrorCode = "MISSING_CHANNEL_SLUG"
	AccountErrorCodeAccountNotConfirmed         AccountErrorCode = "ACCOUNT_NOT_CONFIRMED"
)

var AllAccountErrorCode = []AccountErrorCode{
	AccountErrorCodeActivateOwnAccount,
	AccountErrorCodeActivateSuperuserAccount,
	AccountErrorCodeDuplicatedInputItem,
	AccountErrorCodeDeactivateOwnAccount,
	AccountErrorCodeDeactivateSuperuserAccount,
	AccountErrorCodeDeleteNonStaffUser,
	AccountErrorCodeDeleteOwnAccount,
	AccountErrorCodeDeleteStaffAccount,
	AccountErrorCodeDeleteSuperuserAccount,
	AccountErrorCodeGraphqlError,
	AccountErrorCodeInactive,
	AccountErrorCodeInvalid,
	AccountErrorCodeInvalidPassword,
	AccountErrorCodeLeftNotManageablePermission,
	AccountErrorCodeInvalidCredentials,
	AccountErrorCodeNotFound,
	AccountErrorCodeOutOfScopeUser,
	AccountErrorCodeOutOfScopeGroup,
	AccountErrorCodeOutOfScopePermission,
	AccountErrorCodePasswordEntirelyNumeric,
	AccountErrorCodePasswordTooCommon,
	AccountErrorCodePasswordTooShort,
	AccountErrorCodePasswordTooSimilar,
	AccountErrorCodeRequired,
	AccountErrorCodeUnique,
	AccountErrorCodeJwtSignatureExpired,
	AccountErrorCodeJwtInvalidToken,
	AccountErrorCodeJwtDecodeError,
	AccountErrorCodeJwtMissingToken,
	AccountErrorCodeJwtInvalidCsrfToken,
	AccountErrorCodeChannelInactive,
	AccountErrorCodeMissingChannelSlug,
	AccountErrorCodeAccountNotConfirmed,
}

func (e AccountErrorCode) IsValid() bool {
	switch e {
	case AccountErrorCodeActivateOwnAccount, AccountErrorCodeActivateSuperuserAccount, AccountErrorCodeDuplicatedInputItem, AccountErrorCodeDeactivateOwnAccount, AccountErrorCodeDeactivateSuperuserAccount, AccountErrorCodeDeleteNonStaffUser, AccountErrorCodeDeleteOwnAccount, AccountErrorCodeDeleteStaffAccount, AccountErrorCodeDeleteSuperuserAccount, AccountErrorCodeGraphqlError, AccountErrorCodeInactive, AccountErrorCodeInvalid, AccountErrorCodeInvalidPassword, AccountErrorCodeLeftNotManageablePermission, AccountErrorCodeInvalidCredentials, AccountErrorCodeNotFound, AccountErrorCodeOutOfScopeUser, AccountErrorCodeOutOfScopeGroup, AccountErrorCodeOutOfScopePermission, AccountErrorCodePasswordEntirelyNumeric, AccountErrorCodePasswordTooCommon, AccountErrorCodePasswordTooShort, AccountErrorCodePasswordTooSimilar, AccountErrorCodeRequired, AccountErrorCodeUnique, AccountErrorCodeJwtSignatureExpired, AccountErrorCodeJwtInvalidToken, AccountErrorCodeJwtDecodeError, AccountErrorCodeJwtMissingToken, AccountErrorCodeJwtInvalidCsrfToken, AccountErrorCodeChannelInactive, AccountErrorCodeMissingChannelSlug, AccountErrorCodeAccountNotConfirmed:
		return true
	}
	return false
}

func (e AccountErrorCode) String() string {
	return string(e)
}

func (e *AccountErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountErrorCode", str)
	}
	return nil
}

func (e AccountErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CheckoutErrorCode string

const (
	CheckoutErrorCodeBillingAddressNotSet          CheckoutErrorCode = "BILLING_ADDRESS_NOT_SET"
	CheckoutErrorCodeCheckoutNotFullyPaid          CheckoutErrorCode = "CHECKOUT_NOT_FULLY_PAID"
	CheckoutErrorCodeProductNotPublished           CheckoutErrorCode = "PRODUCT_NOT_PUBLISHED"
	CheckoutErrorCodeProductUnavailableForPurchase CheckoutErrorCode = "PRODUCT_UNAVAILABLE_FOR_PURCHASE"
	CheckoutErrorCodeInsufficientStock             CheckoutErrorCode = "INSUFFICIENT_STOCK"
	CheckoutErrorCodeInvalid                       CheckoutErrorCode = "INVALID"
	CheckoutErrorCodeInvalidShippingMethod         CheckoutErrorCode = "INVALID_SHIPPING_METHOD"
	CheckoutErrorCodeNotFound                      CheckoutErrorCode = "NOT_FOUND"
	CheckoutErrorCodePaymentError                  CheckoutErrorCode = "PAYMENT_ERROR"
	CheckoutErrorCodeQuantityGreaterThanLimit      CheckoutErrorCode = "QUANTITY_GREATER_THAN_LIMIT"
	CheckoutErrorCodeRequired                      CheckoutErrorCode = "REQUIRED"
	CheckoutErrorCodeShippingAddressNotSet         CheckoutErrorCode = "SHIPPING_ADDRESS_NOT_SET"
	CheckoutErrorCodeShippingMethodNotApplicable   CheckoutErrorCode = "SHIPPING_METHOD_NOT_APPLICABLE"
	CheckoutErrorCodeDeliveryMethodNotApplicable   CheckoutErrorCode = "DELIVERY_METHOD_NOT_APPLICABLE"
	CheckoutErrorCodeShippingMethodNotSet          CheckoutErrorCode = "SHIPPING_METHOD_NOT_SET"
	CheckoutErrorCodeShippingNotRequired           CheckoutErrorCode = "SHIPPING_NOT_REQUIRED"
	CheckoutErrorCodeTaxError                      CheckoutErrorCode = "TAX_ERROR"
	CheckoutErrorCodeUnique                        CheckoutErrorCode = "UNIQUE"
	CheckoutErrorCodeVoucherNotApplicable          CheckoutErrorCode = "VOUCHER_NOT_APPLICABLE"
	CheckoutErrorCodeGiftCardNotApplicable         CheckoutErrorCode = "GIFT_CARD_NOT_APPLICABLE"
	CheckoutErrorCodeZeroQuantity                  CheckoutErrorCode = "ZERO_QUANTITY"
	CheckoutErrorCodeMissingChannelSlug            CheckoutErrorCode = "MISSING_CHANNEL_SLUG"
	CheckoutErrorCodeChannelInactive               CheckoutErrorCode = "CHANNEL_INACTIVE"
	CheckoutErrorCodeUnavailableVariantInChannel   CheckoutErrorCode = "UNAVAILABLE_VARIANT_IN_CHANNEL"
	CheckoutErrorCodeEmailNotSet                   CheckoutErrorCode = "EMAIL_NOT_SET"
	CheckoutErrorCodeNoLines                       CheckoutErrorCode = "NO_LINES"
)

var AllCheckoutErrorCode = []CheckoutErrorCode{
	CheckoutErrorCodeBillingAddressNotSet,
	CheckoutErrorCodeCheckoutNotFullyPaid,
	CheckoutErrorCodeProductNotPublished,
	CheckoutErrorCodeProductUnavailableForPurchase,
	CheckoutErrorCodeInsufficientStock,
	CheckoutErrorCodeInvalid,
	CheckoutErrorCodeInvalidShippingMethod,
	CheckoutErrorCodeNotFound,
	CheckoutErrorCodePaymentError,
	CheckoutErrorCodeQuantityGreaterThanLimit,
	CheckoutErrorCodeRequired,
	CheckoutErrorCodeShippingAddressNotSet,
	CheckoutErrorCodeShippingMethodNotApplicable,
	CheckoutErrorCodeDeliveryMethodNotApplicable,
	CheckoutErrorCodeShippingMethodNotSet,
	CheckoutErrorCodeShippingNotRequired,
	CheckoutErrorCodeTaxError,
	CheckoutErrorCodeUnique,
	CheckoutErrorCodeVoucherNotApplicable,
	CheckoutErrorCodeGiftCardNotApplicable,
	CheckoutErrorCodeZeroQuantity,
	CheckoutErrorCodeMissingChannelSlug,
	CheckoutErrorCodeChannelInactive,
	CheckoutErrorCodeUnavailableVariantInChannel,
	CheckoutErrorCodeEmailNotSet,
	CheckoutErrorCodeNoLines,
}

func (e CheckoutErrorCode) IsValid() bool {
	switch e {
	case CheckoutErrorCodeBillingAddressNotSet, CheckoutErrorCodeCheckoutNotFullyPaid, CheckoutErrorCodeProductNotPublished, CheckoutErrorCodeProductUnavailableForPurchase, CheckoutErrorCodeInsufficientStock, CheckoutErrorCodeInvalid, CheckoutErrorCodeInvalidShippingMethod, CheckoutErrorCodeNotFound, CheckoutErrorCodePaymentError, CheckoutErrorCodeQuantityGreaterThanLimit, CheckoutErrorCodeRequired, CheckoutErrorCodeShippingAddressNotSet, CheckoutErrorCodeShippingMethodNotApplicable, CheckoutErrorCodeDeliveryMethodNotApplicable, CheckoutErrorCodeShippingMethodNotSet, CheckoutErrorCodeShippingNotRequired, CheckoutErrorCodeTaxError, CheckoutErrorCodeUnique, CheckoutErrorCodeVoucherNotApplicable, CheckoutErrorCodeGiftCardNotApplicable, CheckoutErrorCodeZeroQuantity, CheckoutErrorCodeMissingChannelSlug, CheckoutErrorCodeChannelInactive, CheckoutErrorCodeUnavailableVariantInChannel, CheckoutErrorCodeEmailNotSet, CheckoutErrorCodeNoLines:
		return true
	}
	return false
}

func (e CheckoutErrorCode) String() string {
	return string(e)
}

func (e *CheckoutErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CheckoutErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CheckoutErrorCode", str)
	}
	return nil
}

func (e CheckoutErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ListEntityErrorCode string

const (
	ListEntityErrorCodeGraphqlError ListEntityErrorCode = "GRAPHQL_ERROR"
	ListEntityErrorCodeNotFound     ListEntityErrorCode = "NOT_FOUND"
)

var AllListEntityErrorCode = []ListEntityErrorCode{
	ListEntityErrorCodeGraphqlError,
	ListEntityErrorCodeNotFound,
}

func (e ListEntityErrorCode) IsValid() bool {
	switch e {
	case ListEntityErrorCodeGraphqlError, ListEntityErrorCodeNotFound:
		return true
	}
	return false
}

func (e ListEntityErrorCode) String() string {
	return string(e)
}

func (e *ListEntityErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ListEntityErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ListEntityErrorCode", str)
	}
	return nil
}

func (e ListEntityErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NatsErrorCodes string

const (
	NatsErrorCodesErrConnectionClosed                                    NatsErrorCodes = "ERR_CONNECTION_CLOSED"
	NatsErrorCodesErrAuthentication                                      NatsErrorCodes = "ERR_AUTHENTICATION"
	NatsErrorCodesErrAuthTimeout                                         NatsErrorCodes = "ERR_AUTH_TIMEOUT"
	NatsErrorCodesErrAuthExpired                                         NatsErrorCodes = "ERR_AUTH_EXPIRED"
	NatsErrorCodesErrMaxPayload                                          NatsErrorCodes = "ERR_MAX_PAYLOAD"
	NatsErrorCodesErrMaxControlLine                                      NatsErrorCodes = "ERR_MAX_CONTROL_LINE"
	NatsErrorCodesErrReservedPublishSubject                              NatsErrorCodes = "ERR_RESERVED_PUBLISH_SUBJECT"
	NatsErrorCodesErrBadPublishSubject                                   NatsErrorCodes = "ERR_BAD_PUBLISH_SUBJECT"
	NatsErrorCodesErrBadSubject                                          NatsErrorCodes = "ERR_BAD_SUBJECT"
	NatsErrorCodesErrBadQualifier                                        NatsErrorCodes = "ERR_BAD_QUALIFIER"
	NatsErrorCodesErrBadClientProtocol                                   NatsErrorCodes = "ERR_BAD_CLIENT_PROTOCOL"
	NatsErrorCodesErrTooManyConnections                                  NatsErrorCodes = "ERR_TOO_MANY_CONNECTIONS"
	NatsErrorCodesErrTooManyAccountConnections                           NatsErrorCodes = "ERR_TOO_MANY_ACCOUNT_CONNECTIONS"
	NatsErrorCodesErrTooManySubs                                         NatsErrorCodes = "ERR_TOO_MANY_SUBS"
	NatsErrorCodesErrTooManySubTokens                                    NatsErrorCodes = "ERR_TOO_MANY_SUB_TOKENS"
	NatsErrorCodesErrClientConnectedToRoutePort                          NatsErrorCodes = "ERR_CLIENT_CONNECTED_TO_ROUTE_PORT"
	NatsErrorCodesErrClientConnectedToLeafNodePort                       NatsErrorCodes = "ERR_CLIENT_CONNECTED_TO_LEAF_NODE_PORT"
	NatsErrorCodesErrLeafNodeHasSameClusterName                          NatsErrorCodes = "ERR_LEAF_NODE_HAS_SAME_CLUSTER_NAME"
	NatsErrorCodesErrLeafNodeDisabled                                    NatsErrorCodes = "ERR_LEAF_NODE_DISABLED"
	NatsErrorCodesErrConnectedToWrongPort                                NatsErrorCodes = "ERR_CONNECTED_TO_WRONG_PORT"
	NatsErrorCodesErrAccountExists                                       NatsErrorCodes = "ERR_ACCOUNT_EXISTS"
	NatsErrorCodesErrBadAccount                                          NatsErrorCodes = "ERR_BAD_ACCOUNT"
	NatsErrorCodesErrReservedAccount                                     NatsErrorCodes = "ERR_RESERVED_ACCOUNT"
	NatsErrorCodesErrMissingAccount                                      NatsErrorCodes = "ERR_MISSING_ACCOUNT"
	NatsErrorCodesErrMissingService                                      NatsErrorCodes = "ERR_MISSING_SERVICE"
	NatsErrorCodesErrBadServiceType                                      NatsErrorCodes = "ERR_BAD_SERVICE_TYPE"
	NatsErrorCodesErrBadSampling                                         NatsErrorCodes = "ERR_BAD_SAMPLING"
	NatsErrorCodesErrAccountValidation                                   NatsErrorCodes = "ERR_ACCOUNT_VALIDATION"
	NatsErrorCodesErrAccountExpired                                      NatsErrorCodes = "ERR_ACCOUNT_EXPIRED"
	NatsErrorCodesErrNoAccountResolver                                   NatsErrorCodes = "ERR_NO_ACCOUNT_RESOLVER"
	NatsErrorCodesErrAccountResolverUpdateTooSoon                        NatsErrorCodes = "ERR_ACCOUNT_RESOLVER_UPDATE_TOO_SOON"
	NatsErrorCodesErrAccountResolverSameClaims                           NatsErrorCodes = "ERR_ACCOUNT_RESOLVER_SAME_CLAIMS"
	NatsErrorCodesErrStreamImportAuthorization                           NatsErrorCodes = "ERR_STREAM_IMPORT_AUTHORIZATION"
	NatsErrorCodesErrStreamImportBadPrefix                               NatsErrorCodes = "ERR_STREAM_IMPORT_BAD_PREFIX"
	NatsErrorCodesErrStreamImportDuplicate                               NatsErrorCodes = "ERR_STREAM_IMPORT_DUPLICATE"
	NatsErrorCodesErrServiceImportAuthorization                          NatsErrorCodes = "ERR_SERVICE_IMPORT_AUTHORIZATION"
	NatsErrorCodesErrImportFormsCycle                                    NatsErrorCodes = "ERR_IMPORT_FORMS_CYCLE"
	NatsErrorCodesErrCycleSearchDepth                                    NatsErrorCodes = "ERR_CYCLE_SEARCH_DEPTH"
	NatsErrorCodesErrClientOrRouteConnectedToGatewayPort                 NatsErrorCodes = "ERR_CLIENT_OR_ROUTE_CONNECTED_TO_GATEWAY_PORT"
	NatsErrorCodesErrWrongGateway                                        NatsErrorCodes = "ERR_WRONG_GATEWAY"
	NatsErrorCodesErrNoSysAccount                                        NatsErrorCodes = "ERR_NO_SYS_ACCOUNT"
	NatsErrorCodesErrRevocation                                          NatsErrorCodes = "ERR_REVOCATION"
	NatsErrorCodesErrServerNotRunning                                    NatsErrorCodes = "ERR_SERVER_NOT_RUNNING"
	NatsErrorCodesErrBadMsgHeader                                        NatsErrorCodes = "ERR_BAD_MSG_HEADER"
	NatsErrorCodesErrMsgHeadersNotSupported                              NatsErrorCodes = "ERR_MSG_HEADERS_NOT_SUPPORTED"
	NatsErrorCodesErrNoRespondersRequiresHeaders                         NatsErrorCodes = "ERR_NO_RESPONDERS_REQUIRES_HEADERS"
	NatsErrorCodesErrClusterNameConfigConflict                           NatsErrorCodes = "ERR_CLUSTER_NAME_CONFIG_CONFLICT"
	NatsErrorCodesErrClusterNameRemoteConflict                           NatsErrorCodes = "ERR_CLUSTER_NAME_REMOTE_CONFLICT"
	NatsErrorCodesErrMalformedSubject                                    NatsErrorCodes = "ERR_MALFORMED_SUBJECT"
	NatsErrorCodesErrSubscribePermissionViolation                        NatsErrorCodes = "ERR_SUBSCRIBE_PERMISSION_VIOLATION"
	NatsErrorCodesErrNoTransforms                                        NatsErrorCodes = "ERR_NO_TRANSFORMS"
	NatsErrorCodesErrCertNotPinned                                       NatsErrorCodes = "ERR_CERT_NOT_PINNED"
	NatsErrorCodesErrDuplicateServerName                                 NatsErrorCodes = "ERR_DUPLICATE_SERVER_NAME"
	NatsErrorCodesErrMinimumVersionRequired                              NatsErrorCodes = "ERR_MINIMUM_VERSION_REQUIRED"
	NatsErrorCodesErrInvalidMappingDestination                           NatsErrorCodes = "ERR_INVALID_MAPPING_DESTINATION"
	NatsErrorCodesErrInvalidMappingDestinationSubject                    NatsErrorCodes = "ERR_INVALID_MAPPING_DESTINATION_SUBJECT"
	NatsErrorCodesErrMappingDestinationNotUsingAllWildcards              NatsErrorCodes = "ERR_MAPPING_DESTINATION_NOT_USING_ALL_WILDCARDS"
	NatsErrorCodesErrUnknownMappingDestinationFunction                   NatsErrorCodes = "ERR_UNKNOWN_MAPPING_DESTINATION_FUNCTION"
	NatsErrorCodesErrorMappingDestinationFunctionWildcardIndexOutOfRange NatsErrorCodes = "ERROR_MAPPING_DESTINATION_FUNCTION_WILDCARD_INDEX_OUT_OF_RANGE"
	NatsErrorCodesErrorMappingDestinationFunctionNotEnoughArguments      NatsErrorCodes = "ERROR_MAPPING_DESTINATION_FUNCTION_NOT_ENOUGH_ARGUMENTS"
	NatsErrorCodesErrorMappingDestinationFunctionInvalidArgument         NatsErrorCodes = "ERROR_MAPPING_DESTINATION_FUNCTION_INVALID_ARGUMENT"
	NatsErrorCodesErrorMappingDestinationFunctionTooManyArguments        NatsErrorCodes = "ERROR_MAPPING_DESTINATION_FUNCTION_TOO_MANY_ARGUMENTS"
)

var AllNatsErrorCodes = []NatsErrorCodes{
	NatsErrorCodesErrConnectionClosed,
	NatsErrorCodesErrAuthentication,
	NatsErrorCodesErrAuthTimeout,
	NatsErrorCodesErrAuthExpired,
	NatsErrorCodesErrMaxPayload,
	NatsErrorCodesErrMaxControlLine,
	NatsErrorCodesErrReservedPublishSubject,
	NatsErrorCodesErrBadPublishSubject,
	NatsErrorCodesErrBadSubject,
	NatsErrorCodesErrBadQualifier,
	NatsErrorCodesErrBadClientProtocol,
	NatsErrorCodesErrTooManyConnections,
	NatsErrorCodesErrTooManyAccountConnections,
	NatsErrorCodesErrTooManySubs,
	NatsErrorCodesErrTooManySubTokens,
	NatsErrorCodesErrClientConnectedToRoutePort,
	NatsErrorCodesErrClientConnectedToLeafNodePort,
	NatsErrorCodesErrLeafNodeHasSameClusterName,
	NatsErrorCodesErrLeafNodeDisabled,
	NatsErrorCodesErrConnectedToWrongPort,
	NatsErrorCodesErrAccountExists,
	NatsErrorCodesErrBadAccount,
	NatsErrorCodesErrReservedAccount,
	NatsErrorCodesErrMissingAccount,
	NatsErrorCodesErrMissingService,
	NatsErrorCodesErrBadServiceType,
	NatsErrorCodesErrBadSampling,
	NatsErrorCodesErrAccountValidation,
	NatsErrorCodesErrAccountExpired,
	NatsErrorCodesErrNoAccountResolver,
	NatsErrorCodesErrAccountResolverUpdateTooSoon,
	NatsErrorCodesErrAccountResolverSameClaims,
	NatsErrorCodesErrStreamImportAuthorization,
	NatsErrorCodesErrStreamImportBadPrefix,
	NatsErrorCodesErrStreamImportDuplicate,
	NatsErrorCodesErrServiceImportAuthorization,
	NatsErrorCodesErrImportFormsCycle,
	NatsErrorCodesErrCycleSearchDepth,
	NatsErrorCodesErrClientOrRouteConnectedToGatewayPort,
	NatsErrorCodesErrWrongGateway,
	NatsErrorCodesErrNoSysAccount,
	NatsErrorCodesErrRevocation,
	NatsErrorCodesErrServerNotRunning,
	NatsErrorCodesErrBadMsgHeader,
	NatsErrorCodesErrMsgHeadersNotSupported,
	NatsErrorCodesErrNoRespondersRequiresHeaders,
	NatsErrorCodesErrClusterNameConfigConflict,
	NatsErrorCodesErrClusterNameRemoteConflict,
	NatsErrorCodesErrMalformedSubject,
	NatsErrorCodesErrSubscribePermissionViolation,
	NatsErrorCodesErrNoTransforms,
	NatsErrorCodesErrCertNotPinned,
	NatsErrorCodesErrDuplicateServerName,
	NatsErrorCodesErrMinimumVersionRequired,
	NatsErrorCodesErrInvalidMappingDestination,
	NatsErrorCodesErrInvalidMappingDestinationSubject,
	NatsErrorCodesErrMappingDestinationNotUsingAllWildcards,
	NatsErrorCodesErrUnknownMappingDestinationFunction,
	NatsErrorCodesErrorMappingDestinationFunctionWildcardIndexOutOfRange,
	NatsErrorCodesErrorMappingDestinationFunctionNotEnoughArguments,
	NatsErrorCodesErrorMappingDestinationFunctionInvalidArgument,
	NatsErrorCodesErrorMappingDestinationFunctionTooManyArguments,
}

func (e NatsErrorCodes) IsValid() bool {
	switch e {
	case NatsErrorCodesErrConnectionClosed, NatsErrorCodesErrAuthentication, NatsErrorCodesErrAuthTimeout, NatsErrorCodesErrAuthExpired, NatsErrorCodesErrMaxPayload, NatsErrorCodesErrMaxControlLine, NatsErrorCodesErrReservedPublishSubject, NatsErrorCodesErrBadPublishSubject, NatsErrorCodesErrBadSubject, NatsErrorCodesErrBadQualifier, NatsErrorCodesErrBadClientProtocol, NatsErrorCodesErrTooManyConnections, NatsErrorCodesErrTooManyAccountConnections, NatsErrorCodesErrTooManySubs, NatsErrorCodesErrTooManySubTokens, NatsErrorCodesErrClientConnectedToRoutePort, NatsErrorCodesErrClientConnectedToLeafNodePort, NatsErrorCodesErrLeafNodeHasSameClusterName, NatsErrorCodesErrLeafNodeDisabled, NatsErrorCodesErrConnectedToWrongPort, NatsErrorCodesErrAccountExists, NatsErrorCodesErrBadAccount, NatsErrorCodesErrReservedAccount, NatsErrorCodesErrMissingAccount, NatsErrorCodesErrMissingService, NatsErrorCodesErrBadServiceType, NatsErrorCodesErrBadSampling, NatsErrorCodesErrAccountValidation, NatsErrorCodesErrAccountExpired, NatsErrorCodesErrNoAccountResolver, NatsErrorCodesErrAccountResolverUpdateTooSoon, NatsErrorCodesErrAccountResolverSameClaims, NatsErrorCodesErrStreamImportAuthorization, NatsErrorCodesErrStreamImportBadPrefix, NatsErrorCodesErrStreamImportDuplicate, NatsErrorCodesErrServiceImportAuthorization, NatsErrorCodesErrImportFormsCycle, NatsErrorCodesErrCycleSearchDepth, NatsErrorCodesErrClientOrRouteConnectedToGatewayPort, NatsErrorCodesErrWrongGateway, NatsErrorCodesErrNoSysAccount, NatsErrorCodesErrRevocation, NatsErrorCodesErrServerNotRunning, NatsErrorCodesErrBadMsgHeader, NatsErrorCodesErrMsgHeadersNotSupported, NatsErrorCodesErrNoRespondersRequiresHeaders, NatsErrorCodesErrClusterNameConfigConflict, NatsErrorCodesErrClusterNameRemoteConflict, NatsErrorCodesErrMalformedSubject, NatsErrorCodesErrSubscribePermissionViolation, NatsErrorCodesErrNoTransforms, NatsErrorCodesErrCertNotPinned, NatsErrorCodesErrDuplicateServerName, NatsErrorCodesErrMinimumVersionRequired, NatsErrorCodesErrInvalidMappingDestination, NatsErrorCodesErrInvalidMappingDestinationSubject, NatsErrorCodesErrMappingDestinationNotUsingAllWildcards, NatsErrorCodesErrUnknownMappingDestinationFunction, NatsErrorCodesErrorMappingDestinationFunctionWildcardIndexOutOfRange, NatsErrorCodesErrorMappingDestinationFunctionNotEnoughArguments, NatsErrorCodesErrorMappingDestinationFunctionInvalidArgument, NatsErrorCodesErrorMappingDestinationFunctionTooManyArguments:
		return true
	}
	return false
}

func (e NatsErrorCodes) String() string {
	return string(e)
}

func (e *NatsErrorCodes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NatsErrorCodes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NatsErrorCodes", str)
	}
	return nil
}

func (e NatsErrorCodes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductErrorCode string

const (
	ProductErrorCodeDuplicatedInputItem               ProductErrorCode = "DUPLICATED_INPUT_ITEM"
	ProductErrorCodeGraphqlError                      ProductErrorCode = "GRAPHQL_ERROR"
	ProductErrorCodeImageUploadError                  ProductErrorCode = "IMAGE_UPLOAD_ERROR"
	ProductErrorCodeInvalid                           ProductErrorCode = "INVALID"
	ProductErrorCodeNotFound                          ProductErrorCode = "NOT_FOUND"
	ProductErrorCodeRequired                          ProductErrorCode = "REQUIRED"
	ProductErrorCodeUnique                            ProductErrorCode = "UNIQUE"
	ProductErrorCodeCannotManageProductWithoutVariant ProductErrorCode = "CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT"
)

var AllProductErrorCode = []ProductErrorCode{
	ProductErrorCodeDuplicatedInputItem,
	ProductErrorCodeGraphqlError,
	ProductErrorCodeImageUploadError,
	ProductErrorCodeInvalid,
	ProductErrorCodeNotFound,
	ProductErrorCodeRequired,
	ProductErrorCodeUnique,
	ProductErrorCodeCannotManageProductWithoutVariant,
}

func (e ProductErrorCode) IsValid() bool {
	switch e {
	case ProductErrorCodeDuplicatedInputItem, ProductErrorCodeGraphqlError, ProductErrorCodeImageUploadError, ProductErrorCodeInvalid, ProductErrorCodeNotFound, ProductErrorCodeRequired, ProductErrorCodeUnique, ProductErrorCodeCannotManageProductWithoutVariant:
		return true
	}
	return false
}

func (e ProductErrorCode) String() string {
	return string(e)
}

func (e *ProductErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductErrorCode", str)
	}
	return nil
}

func (e ProductErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UploadErrorCode string

const (
	UploadErrorCodeGraphqlError UploadErrorCode = "GRAPHQL_ERROR"
)

var AllUploadErrorCode = []UploadErrorCode{
	UploadErrorCodeGraphqlError,
}

func (e UploadErrorCode) IsValid() bool {
	switch e {
	case UploadErrorCodeGraphqlError:
		return true
	}
	return false
}

func (e UploadErrorCode) String() string {
	return string(e)
}

func (e *UploadErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UploadErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UploadErrorCode", str)
	}
	return nil
}

func (e UploadErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
