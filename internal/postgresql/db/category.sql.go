// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: category.sql

package db

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :exec
insert into category (name, icon)
values ($1, $2)
`

type CreateCategoryParams struct {
	Name string         `json:"name"`
	Icon sql.NullString `json:"icon"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.Exec(ctx, createCategory, arg.Name, arg.Icon)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
delete
from category
where id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const listAllCategories = `-- name: ListAllCategories :many
select id, created_at, updated_at, deleted_at, name, icon
from category
`

func (q *Queries) ListAllCategories(ctx context.Context) ([]*Category, error) {
	rows, err := q.db.Query(ctx, listAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :exec
update category
set name       = $1,
    icon       = $2,
    updated_at = $3
where id = $4
`

type UpdateCategoryParams struct {
	Name      string         `json:"name"`
	Icon      sql.NullString `json:"icon"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.Exec(ctx, updateCategory,
		arg.Name,
		arg.Icon,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
